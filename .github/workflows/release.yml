name: release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Install Ruby and Gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.2
          bundler-cache: true
      - name: Build with Gradle
        run: |
          ./gradlew --no-daemon -s build buildDeb installBootDist
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
         registry: ghcr.io
         username: yuzawa-san
         password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/yuzawa-san/googolplex-theater
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=tag::$(echo ${{ github.ref }} | cut -d / -f 3)
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.get_tag.outputs.tag }}
          draft: true
          prerelease: false
      - name: Get the ZIP
        id: get_zip
        run: echo ::set-output name=filename::$(basename $(find build/distributions -name "*-boot-*.zip"))
      - name: Upload Release ZIP
        id: upload-release-asset-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/distributions/${{ steps.get_zip.outputs.filename }}
          asset_name: ${{ steps.get_zip.outputs.filename }}
          asset_content_type: application/zip
      - name: Get the DEB
        id: get_deb
        run: echo ::set-output name=filename::$(basename $(find build/distributions -name "*.deb"))
      - name: Upload to Packagecloud
        run: |
          bundle exec package_cloud push yuzawa-san/googolplex-theater/raspbian/bullseye ./build/distributions/${{ steps.get_deb.outputs.filename }}
          bundle exec package_cloud push yuzawa-san/googolplex-theater/raspbian/bookworm ./build/distributions/${{ steps.get_deb.outputs.filename }}
          bundle exec package_cloud push yuzawa-san/googolplex-theater/ubuntu/focal ./build/distributions/${{ steps.get_deb.outputs.filename }}
          bundle exec package_cloud push yuzawa-san/googolplex-theater/ubuntu/jammy ./build/distributions/${{ steps.get_deb.outputs.filename }}
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      - name: Upload Release DEB
        id: upload-release-asset-deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/distributions/${{ steps.get_deb.outputs.filename }}
          asset_name: ${{ steps.get_deb.outputs.filename }}
          asset_content_type: application/vnd.debian.binary-package
