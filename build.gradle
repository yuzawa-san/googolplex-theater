plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id "net.researchgate.release" version "3.0.2"
	id "com.google.protobuf" version "0.9.4"
	id "com.diffplug.spotless" version "6.25.0"
	id "com.github.spotbugs" version "6.0.7"
	id "com.github.jakemarsden.git-hooks" version "0.0.2"
	id 'com.github.jk1.dependency-license-report' version '2.5'
	id("com.netflix.nebula.ospackage") version "11.5.0"
	id "io.freefair.lombok" version "8.4"
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "application"
apply plugin: "jacoco"
apply plugin: "com.netflix.nebula.ospackage"
apply plugin: "io.spring.dependency-management"

java {
	sourceCompatibility = 17
	targetCompatibility = 17
}

description="Persistently maintain multiple Chromecasts as digital signage without a browser."

repositories {
	mavenCentral()
}

release {
	tagTemplate = 'v${version}'
}

lombok {
	version = "1.18.30"
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: 'com/jyuzawa/googolplex_theater/protobuf/**')
		}))
	}
}

licenseReport {
	renderers = [new com.github.jk1.license.render.TextReportRenderer()]
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.25.3"
	}
	generateProtoTasks {
		ofSourceSet('main')
	}
}

spotless {
	java {
		target '**/*.java'
		targetExclude "${protobuf.generatedFilesBaseDir}/**/*.java"
		licenseHeader '/*\n * Copyright (c) $YEAR James Yuzawa (https://www.jyuzawa.com/)\n * SPDX-License-Identifier: MIT\n */'
		removeUnusedImports()
		importOrder()
		palantirJavaFormat()
		endWithNewline()
	}
	format 'misc', {
		target '**/*.gradle', '**/*.proto', '**/*.feature'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}
	format 'md', {
		target '**/*.md'
		trimTrailingWhitespace()
		endWithNewline()
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
	implementation 'com.google.protobuf:protobuf-java:3.25.1'
	implementation 'org.jmdns:jmdns:3.5.9'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.16.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.mockito:mockito-core:5.11.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
	testImplementation 'com.google.jimfs:jimfs:1.3.0'
	testImplementation(platform('io.cucumber:cucumber-bom:7.15.0'))
	testImplementation 'io.cucumber:cucumber-java'
	testImplementation 'io.cucumber:cucumber-spring'
	testImplementation 'io.cucumber:cucumber-junit-platform-engine'
	testImplementation 'org.junit.platform:junit-platform-suite:1.10.1'
}

test {
	useJUnitPlatform()
	systemProperty("cucumber.junit-platform.naming-strategy", "long")
	finalizedBy jacocoTestReport
}

application {
	mainClass = 'com.jyuzawa.googolplex_theater.GoogolplexTheater'
}

bootJar.dependsOn(generateLicenseReport)

distributions {
	boot {
		contents {
			from 'LICENSE'
			from 'README.md'
			from "${project.buildDir}/reports/dependency-license/THIRD-PARTY-NOTICES.txt"
			from "${projectDir}/src/dist"
		}
	}
}

buildDeb {
	release '1'
	dependsOn installBootDist
	license "MIT"
	url "https://github.com/yuzawa-san/googolplex-theater"
	packager "James Yuzawa"
	into '/opt/googolplex-theater'
	user 'googolplex-theater'
	permissionGroup 'googolplex-theater'
	requires("openjdk-17-jre-headless")
	from("${project.buildDir}/install/googolplex-theater-boot") {
		exclude 'conf'
		exclude 'service'
		fileMode 0755
	}
	from("${project.buildDir}/install/googolplex-theater-boot/conf") {
		fileType CONFIG | NOREPLACE
		fileMode 0644
		into 'conf'
	}
	configurationFile("/opt/googolplex-theater/conf/config.yml")
	configurationFile("/opt/googolplex-theater/conf/devices.yml")
	from("${projectDir}/deb/googolplex-theater.service") {
		fileType CONFIG | NOREPLACE
		addParentDirs = false
		fileMode 0644
		into "/usr/lib/systemd/system"
	}
	configurationFile("/usr/lib/systemd/system/googolplex-theater.service")
	preInstall file("${projectDir}/deb/preinst")
	postInstall file("${projectDir}/deb/postinst")
	preUninstall file("${projectDir}/deb/prerm")
	postUninstall file("${projectDir}/deb/postrm")
}

spotbugs {
	ignoreFailures = true
	excludeFilter = file('spotbugs_exclude.xml')
}

spotbugsMain {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

gitHooks {
	hooks = ['pre-push': 'spotlessCheck']
}
