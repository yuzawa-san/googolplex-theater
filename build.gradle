plugins {
	id "net.researchgate.release" version "2.8.1"
	id "com.google.protobuf" version "0.8.14"
	id "com.diffplug.spotless" version "5.8.2"
	id "com.github.spotbugs" version "4.6.0"
	id "com.github.ben-manes.versions" version "0.36.0"
	id "com.github.jakemarsden.git-hooks" version "0.0.2"
	id 'com.github.jk1.dependency-license-report' version '1.16'
	id "nebula.deb" version "8.4.1"
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "application"
apply plugin: "jacoco"
apply plugin: "nebula.ospackage"

sourceCompatibility = 1.8
targetCompatibility = 1.8

description="Persistently maintain multiple Chromecasts as digital signage without a browser."

repositories {
	mavenCentral()
}

release {
	tagTemplate = 'v${version}'
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: '**/*Wire**')
		}))
	}
}
check.dependsOn jacocoTestReport

licenseReport {
	renderers = [new com.github.jk1.license.render.TextReportRenderer()]
}

sourceSets {
	main {
		java {
			srcDirs "${protobuf.generatedFilesBaseDir}/main/java"
		}
	}
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.14.0"
	}
	generateProtoTasks {
		all().each { task -> }
		ofSourceSet('main')
	}
}

spotless {
	java {
		targetExclude("**/Wire.java")
		removeUnusedImports()
		googleJavaFormat()
	}
	format 'gradle', {
		target '**/*.gradle'
		trimTrailingWhitespace()
		indentWithTabs()
	}
	format 'proto', {
		target '**/*.proto'
		trimTrailingWhitespace()
		indentWithTabs()
	}
}

dependencies {
	implementation 'org.apache.logging.log4j:log4j-api:2.14.0'
	implementation 'org.apache.logging.log4j:log4j-core:2.14.0'
	implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.0'
	implementation 'org.slf4j:slf4j-api:1.7.30'
	implementation 'com.google.protobuf:protobuf-java:3.14.0'
	implementation 'io.vertx:vertx-core:4.0.0'
	implementation 'io.vertx:vertx-web:4.0.0'
	implementation 'io.vertx:vertx-web-templ-handlebars:4.0.0'
	implementation 'io.netty:netty-common:4.1.55.Final'
	implementation 'io.netty:netty-transport:4.1.56.Final'
	implementation 'io.netty:netty-codec:4.1.55.Final'
	implementation 'io.netty:netty-handler:4.1.55.Final'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.12.0'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.0'
	implementation 'org.jmdns:jmdns:3.5.6'
	implementation 'commons-cli:commons-cli:1.4'
	testImplementation 'org.mockito:mockito-core:3.6.28'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
	testImplementation 'io.vertx:vertx-junit5:4.0.0'
	testImplementation 'io.vertx:vertx-web-client:4.0.0'
	testImplementation 'com.google.jimfs:jimfs:1.1'
}

test {
	useJUnitPlatform()
}

def getGitHash = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', 'HEAD'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

mainClassName = 'com.jyuzawa.googolplex_theater.GoogolplexTheater'

jar {
	manifest {
		attributes(
			'Built-By'               : System.properties['user.name'],
			'Build-Timestamp'        : new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
			'Specification-Version'  : version,
			'Implementation-Version' : getGitHash(),
			'Created-By'             : "Gradle ${gradle.gradleVersion}",
			'Build-Jdk'              : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
			'Build-OS'               : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
		)
	}
}
jar.dependsOn(generateLicenseReport)

distributions {
	main {
		contents {
			from 'LICENSE'
			from 'README.md'
			from "${project.buildDir}/reports/dependency-license/THIRD-PARTY-NOTICES.txt"
		}
	}
}

task buildDocker(type:Exec, dependsOn:build) {
	def args = ['docker','buildx','build','--platform','linux/amd64,linux/arm/v7,linux/arm64/v8']
	if (!version.contains('-SNAPSHOT')) {
		args += ['-t','yuzawa/googolplex-theater:latest']
	}
	args += ['-t',"yuzawa/googolplex-theater:v${version}",'--push','.']
	commandLine args
}
afterReleaseBuild.dependsOn buildDocker

buildDeb {
	release '1'
	dependsOn build
	license "MIT"
	url "https://github.com/yuzawa-san/googolplex-theater"
	packager "James Yuzawa"
	into '/opt/googolplex-theater'
	user 'googolplex-theater'
	permissionGroup 'googolplex-theater'
	requires("openjdk-11-jre-headless").or("openjdk-8-jre-headless")
	from("${project.buildDir}/install/googolplex-theater") {
		exclude 'conf'
		exclude 'service'
		fileMode 0755
	}
	from("${project.buildDir}/install/googolplex-theater/conf") {
		fileType CONFIG | NOREPLACE
		fileMode 0644
		into 'conf'
	}
	configurationFile("/opt/googolplex-theater/conf/cast_config.json")
	from("${projectDir}/deb/googolplex-theater.service") {
		fileType CONFIG | NOREPLACE
		addParentDirs = false
		fileMode 0644
		into "/usr/lib/systemd/system"
	}
	configurationFile("/usr/lib/systemd/system/googolplex-theater.service")
	preInstall file("${projectDir}/deb/preinst")
	postInstall file("${projectDir}/deb/postinst")
	preUninstall file("${projectDir}/deb/prerm")
	postUninstall file("${projectDir}/deb/postrm")
}
afterReleaseBuild.dependsOn buildDeb

spotbugs {
	ignoreFailures = true
	excludeFilter = file('spotbugs_exclude.xml')
}

spotbugsMain {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

gitHooks {
	hooks = ['pre-push': 'spotlessCheck']
}