plugins {
	id "net.researchgate.release" version "3.0.2"
	id "com.google.protobuf" version "0.9.1"
	id "com.diffplug.spotless" version "6.12.0"
	id "com.github.spotbugs" version "5.0.13"
	id "com.github.ben-manes.versions" version "0.44.0"
	id "com.github.jakemarsden.git-hooks" version "0.0.2"
	id 'com.github.jk1.dependency-license-report' version '2.1'
	id "nebula.deb" version "9.1.1"
	id "io.freefair.lombok" version "6.6.1"
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "application"
apply plugin: "jacoco"
apply plugin: "nebula.ospackage"

sourceCompatibility = 11
targetCompatibility = 11

description="Persistently maintain multiple Chromecasts as digital signage without a browser."

repositories {
	mavenCentral()
}

release {
	tagTemplate = 'v${version}'
}

lombok {
	version = "1.18.24"
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: "${protobuf.generatedFilesBaseDir}/**/*.java")
		}))
	}
}
check.dependsOn jacocoTestReport

licenseReport {
	renderers = [new com.github.jk1.license.render.TextReportRenderer()]
}

sourceSets {
	main {
		java {
			srcDirs "${protobuf.generatedFilesBaseDir}/main/java"
		}
	}
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.21.12"
	}
	generateProtoTasks {
		all().each { task -> }
		ofSourceSet('main')
	}
}

spotless {
	java {
		target '**/*.java'
		targetExclude "${protobuf.generatedFilesBaseDir}/**/*.java"
		licenseHeader '/*\n * Copyright (c) $YEAR James Yuzawa (https://www.jyuzawa.com/)\n * All rights reserved. Licensed under the MIT License.\n */'
		removeUnusedImports()
		importOrder()
		palantirJavaFormat()
		endWithNewline()
	}
	format 'misc', {
		target '**/*.gradle', '**/*.proto', '**/*.feature'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}
	format 'md', {
		target '**/*.md'
		trimTrailingWhitespace()
		endWithNewline()
	}
}

dependencies {
	implementation(platform('org.apache.logging.log4j:log4j-bom:2.19.0'))
	implementation(platform('io.netty:netty-bom:4.1.85.Final'))
	implementation(platform('io.vertx:vertx-stack-depchain:4.3.7'))
	implementation(platform('com.fasterxml.jackson:jackson-bom:2.14.1'))
	runtimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl'
	implementation 'org.slf4j:slf4j-api:2.0.7'
	implementation 'com.google.protobuf:protobuf-java:3.21.12'
	implementation 'io.vertx:vertx-core'
	implementation 'io.vertx:vertx-web'
	implementation 'io.vertx:vertx-web-templ-handlebars'
	implementation 'io.netty:netty-common'
	implementation 'io.netty:netty-transport'
	implementation 'io.netty:netty-codec'
	implementation 'io.netty:netty-handler'
	implementation 'com.fasterxml.jackson.core:jackson-core'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
	implementation 'org.jmdns:jmdns:3.5.8'
	implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
	testImplementation 'org.mockito:mockito-core:4.9.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
	testImplementation 'io.vertx:vertx-junit5'
	testImplementation 'io.vertx:vertx-web-client'
	testImplementation 'com.google.jimfs:jimfs:1.2'
	testImplementation(platform('io.cucumber:cucumber-bom:7.11.1'))
	testImplementation 'io.cucumber:cucumber-java'
	testImplementation 'io.cucumber:cucumber-junit-platform-engine'
	testImplementation 'org.junit.platform:junit-platform-suite:1.9.1'
}

test {
	useJUnitPlatform()
	systemProperty("cucumber.junit-platform.naming-strategy", "long")
}

def getGitHash = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', 'HEAD'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

mainClassName = 'com.jyuzawa.googolplex_theater.GoogolplexTheater'

jar {
	doFirst {
		manifest {
			attributes(
				'Built-By'               : System.properties['user.name'],
				'Build-Timestamp'        : new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
				'Specification-Version'  : project.version,
				'Implementation-Version' : "${-> getGitHash()}",
				'Created-By'             : "Gradle ${gradle.gradleVersion}",
				'Build-Jdk'              : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
				'Build-OS'               : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
			)
		}
	}
}
jar.dependsOn(generateLicenseReport)

distributions {
	main {
		contents {
			from 'LICENSE'
			from 'README.md'
			from "${project.buildDir}/reports/dependency-license/THIRD-PARTY-NOTICES.txt"
		}
	}
}

buildDeb {
	release '1'
	dependsOn installDist
	license "MIT"
	url "https://github.com/yuzawa-san/googolplex-theater"
	packager "James Yuzawa"
	into '/opt/googolplex-theater'
	user 'googolplex-theater'
	permissionGroup 'googolplex-theater'
	requires("default-jre-headless")
	from("${project.buildDir}/install/googolplex-theater") {
		exclude 'conf'
		exclude 'service'
		fileMode 0755
	}
	from("${project.buildDir}/install/googolplex-theater/conf") {
		fileType CONFIG | NOREPLACE
		fileMode 0644
		into 'conf'
	}
	configurationFile("/opt/googolplex-theater/conf/config.yml")
	configurationFile("/opt/googolplex-theater/conf/devices.yml")
	from("${projectDir}/deb/googolplex-theater.service") {
		fileType CONFIG | NOREPLACE
		addParentDirs = false
		fileMode 0644
		into "/usr/lib/systemd/system"
	}
	configurationFile("/usr/lib/systemd/system/googolplex-theater.service")
	preInstall file("${projectDir}/deb/preinst")
	postInstall file("${projectDir}/deb/postinst")
	preUninstall file("${projectDir}/deb/prerm")
	postUninstall file("${projectDir}/deb/postrm")
}

spotbugs {
	ignoreFailures = true
	excludeFilter = file('spotbugs_exclude.xml')
}

spotbugsMain {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

gitHooks {
	hooks = ['pre-push': 'spotlessCheck']
}
